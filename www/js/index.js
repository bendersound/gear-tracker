// SQLite database for local storage
var localStorage = window.localStorage;

// An array of all cases in the app
var caseList = [];

// Keeps track of the current case being operated on
var caseIDText;

//A stack containing a DOM element id for each screen that has been opened by the user
var screenStack = [];

var app = {
  // Application Constructor
  initialize: function() {
    //Device listeners
    document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    document.addEventListener('pause', this.onPause.bind(this), false);
    document.addEventListener('backbutton', this.onBackKeyDown, false);

    //Home screen listeners
    document.getElementById('cameraButton').addEventListener('click', scanQR);
    document.getElementById('openCaseList').addEventListener('click', openCaseList);

    //Case list screen listeners
    document.getElementById('submitCaseButton').addEventListener('click', openCaseFormManual);
    document.getElementById('createCaseButton').addEventListener('click', openCaseFormNew);
    document.getElementById('clearStorageButton').addEventListener('click', clearLocalStorage);
    document.getElementById('generateQRButton').addEventListener('click', exportQR);

    //Case form screen listeners
    document.getElementById('submitFormButton').addEventListener('click', submitForm);
  },

  // Executed when the onDeviceReady event is received
  onDeviceReady: function()
  {
    openCamera();
    //openTestCases1();
    caseList = openCases();
    renderCaseList();

    console.log('device ready');
  },

  // Stores all case info into the db when the app is put in the background or closed
  onPause: function()
  {
    storeCases();
  },

  // Overrides the default back button functionality
  onBackKeyDown: function(e)
  {
    //If a screen has been opened, hide the most recent one
    if (screenStack.length !== 0)
    {
      hideCurrentElement();
      return;
    }

    // Otherwise, exit the app
    navigator.app.exitApp();
  }
};

// Improved alert dialog box
function popupDialog(title, message)
{
  var buttonName = 'Ok';
  navigator.notification.alert(message, alertCallback, title, buttonName);

  function alertCallback()
  {
   console.log('Alert Dismissed');
  }
}

// Scans to a QR code, checks if it is valid, and opens the correct case form
function scanQR()
{
  var scanCallback = function(error, content)
  {
    if(error)
    {
      popupDialog('Error', 'Scan unsuccesful')
    }
    else
    {
      {
        var idPair = content.split('.', 2);
        if (idPair[0] === 'gear_tracker') {
          openCaseForm(parseInt(idPair[1]));
        }
        else
        {
          popupDialog('Error', 'This QR code was not generated by Gear Tracker');
        }
      }
    }
  }

  // Pause the preview so users know a code is being scanned
  QRScanner.pausePreview(function(status)
  {
    console.log(status);
  })

  // Resume preview
  QRScanner.resumePreview(function(status)
  {
    console.log(status);
  })

  // Scan the QR code
  QRScanner.scan(scanCallback);
}

//generates a QR code in the format of 'gear_tracker.#CASE ID#'
function generateQR(caseID)
{
  var qrText = 'gear_tracker.' + caseID;
  var frame = document.getElementById('qrFrame')
  var output;
  frame.innerHTML = '';
  if (typeof qrText !== 'undefined')
  {
    $(frame).qrcode({text: qrText});
    output = document.querySelector('canvas').toDataURL();
  }
  return output;
}

// Exports the QR code by sharing it with another app
function exportQR()
{
  var base64Data = generateQR(caseIDText);
  if (base64Data === 'undefined')
  {
    popupDialog('Error', 'Cannot Generate QR Code');
    return;
  }

  window.plugins.socialsharing.share(null, caseList[caseIDText].name, base64Data, null);
}

// Initializes the QR scanner
function openCamera()
{
  var prepareCallback = function(error, status)
  {
    if(error)
    {
      console.error(error.message);
    }
    else
    {
      console.log(status);
    }
  };

  QRScanner.prepare(prepareCallback);
  QRScanner.show(function(status)
  {
    console.log(status);
  });
}

// Store data in the current case form in an array
function submitForm()
{
  // only update array if there are any changes to be made
  var updated = false;
  var caseNameText = document.getElementById('caseFormName').value;
  var caseInfoText = document.getElementById('caseInfoInput').value;

  // If the case being stored already exists, update the existing data
  if (typeof caseList[caseIDText] !== 'undefined') {
    if (typeof caseInfoText !== 'undefined' && caseInfoText !== caseList[caseIDText].info) {
      caseList[caseIDText].info = caseInfoText;
      updated = true;
    }

    if (typeof caseNameText !== 'undefined' && caseIDText !== caseList[caseIDText].name) {
      caseList[caseIDText].name = caseNameText;
      updated = true;
    }
  }

  // If the case being stored is a new case, create a new entry in the array
  else if (caseIDText === caseList.length) {
    caseList.push({ name: caseNameText, info: caseInfoText, equipment_count: caseIDText});

    // Allows users to generate QR codes for a new case only after data has been saved for that case
    document.getElementById('generateQRButton').disabled = false;
    updated = true;
  }
  else
  {
    popupDialog('Error!', 'Case could not be saved');
    return;
  }

  // If any info has been changed, re-render the case list
  if (updated)
  {
    renderCaseList();
  }
  popupDialog('Success!', 'Information updated');
  storeCases();
}

// Open case form for viewing
function openCaseForm(caseID)
{
  // If the case exists, display the correct data
  if (typeof caseList[caseID] !== 'undefined') {
    document.getElementById('caseFormName').value = caseList[caseID].name;
    document.getElementById('caseInfoInput').value = caseList[caseID].info;
  }

  // If the case being created is new and in the correct spot, reset the form
  else if (caseID === caseList.length)
  {
    document.getElementById('caseForm').reset();
  }

  // Otherwise, display an error
  else if (caseID >= caseList.length)
  {
    popupDialog('Error!', 'Case does not exist. Create a new case.');
    return;
  }
  caseIDText = caseID;
  displayElement('caseFormPopup');
}

// Get case id from field on homescreen and open for editting
function openCaseFormManual()
{
  openCaseForm(document.getElementById('caseIDForm').value);
}

// Create a new case and open the form for that case
function openCaseFormNew()
{
  document.getElementById('generateQRButton').disabled = true;
  openCaseForm(caseList.length);
}

// Allows a listener to open the case list
function openCaseList() {
  displayElement('leftPanel');
}

//clear all cases in ram and on disk
function clearLocalStorage()
{
  localStorage.clear();
  caseList = [];
  renderEmptyCaseList();
}

// Render a list of objects within a table which is then added to the given index of the given parent
// Header specifies which parameters of the object to display in which order as well as the header text for that parameter
function renderList(items, header, parent, childIndex)
{
  var tBody = document.createElement("tbody");
  var tRow = document.createElement("tr");
  var newCell;
  var i = 0;

  // Create the header row and append it to the table
  for (var headerProp in header)
  {
    newCell = document.createElement("th");
    newCell.innerHTML = header[headerProp];
    tRow.appendChild(newCell);
  }
  tBody.appendChild(tRow);

  // Create a new row for each entry in the array
  for (i = 0; i < items.length; i++)
  {
    tRow = document.createElement("tr");
    //tableRow.setAttribute('data-href', 'javascript:openCaseForm(' + items[i].name + ');');

    // Iterate through each object in the header and add the correct data from the case
    for (var propertyValue in header)
    {
      newCell = document.createElement("td");
      newCell.innerHTML = items[i][propertyValue];
      tRow.appendChild(newCell);
    }
    tBody.appendChild(tRow);
  }
  parent.replaceChild(tBody, parent.childNodes[childIndex])
}

// Helper for renderCaseList() renders the proper message if the case list is empty
function renderEmptyCaseList()
{
  var cases = [];
  var header = { tmp: 'No cases here!' };
  var listParent = document.getElementById('caseList');
  renderList(cases, header, listParent, 0);
}

// Renders the items in the case list
function renderCaseList()
{
  if (caseList.length === 0)
  {
    renderEmptyCaseList();
    return;
  }

  var header = { name: 'Name', equipment_count: 'ID' };
  var listParent = document.getElementById('caseList');

  renderList(caseList, header, listParent, 0);
}

// Stores dummy case data to disk
// Still requires the app to load the case data properly
function openTestCases1()
{
  var testCase1 = {name:'QSC 1', info:'1x QSC K10.2', equipment_count:0}
  var testCase2 = {name:'QSC 2', info:'1x QSC K10.2', equipment_count:1}
  var testCase3 = {name:'XLR Cables', info:"1x 50' GLS XLR\n3x 25' GLS XLR\n4x 10' AB XLR\n4x 6' AB XLR", equipment_count:2}
  var testCase4 = {name:'Megapars 1', info:'8x ADJ Megapar RGBUV', equipment_count:3}
  var testCase5 = {name:'Megapars 2', info:'8x ADJ Megapar RGBUV', equipment_count:4}

  caseList = [testCase1, testCase2, testCase3, testCase4, testCase5];
  storeCases();
  caseList = [];
}

// Loads case data stored in disk
function openCases()
{
  var cases = JSON.parse(localStorage.getItem('caseList'));
  if (cases === null)
  {
    cases = [];
  }
  return cases;
}

// Stores case data to disk
function storeCases()
{
  localStorage.setItem('caseList', JSON.stringify(caseList));
}

// Displays the popup element with the given id
function displayElement(id)
{
  document.getElementById(id).style.display = 'block';
  screenStack.push(id);
}

// Hides the popup element with the given id
function hideCurrentElement()
{
  id = screenStack.pop();
  document.getElementById(id).style.display = 'none';
}

app.initialize();
